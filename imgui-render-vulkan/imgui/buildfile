intf_libs = # Interface dependencies.
import intf_libs += imgui%lib{imgui}  Vulkan-Hpp%lib{Vulkan-Hpp}
impl_libs = # Implementation dependencies.
# import impl_libs += 

platform_libs =

switch $cxx.target.class
{
    case 'windows'
    {
        if ($cxx.target.system == 'mingw32')
        {
            platform_libs += -lvulkan-1
        }
        else
        {
            platform_libs += vulkan-1.lib 
        }
    }
    case 'macos'
    {

    }
    default
    {
        platform_libs += -lvulkan
    }
}

lib{imgui-render-vulkan}: {hxx cxx}{**} $impl_libs $intf_libs

# Build options.
out_pfx_inc = [dir_path] $out_root/imgui/
src_pfx_inc = [dir_path] $src_root/imgui/

cxx.libs =+ $platform_libs
cxx.poptions =+ "-I$out_pfx_inc" "-I$src_pfx_inc" -DIMGUI_EXPORT -DVK_PROTOTYPES

{hbmia obja}{*}: cxx.poptions += -DIMGUI_RENDER_VULKAN_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DIMGUI_RENDER_VULKAN_SHARED_BUILD

# Export options.
lib{imgui-render-vulkan}:
{
    cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc" -DVK_PROTOTYPES
    cxx.export.libs = $intf_libs $platform_libs
}

liba{imgui-render-vulkan}: cxx.export.poptions += -DIMGUI_RENDER_VULKAN_STATIC
libs{imgui-render-vulkan}: cxx.export.poptions += -DIMGUI_RENDER_VULKAN_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
    lib{imgui-render-vulkan}: bin.lib.version = "-$version.project_id"
else
    lib{imgui-render-vulkan}: bin.lib.version = "-$version.major.$version.minor"

hxx{*}:
{
    install = include/
    install.subdirs = true
}
