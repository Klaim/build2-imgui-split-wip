intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}
sys_libs = 

# Big switch statement here for linking with libs and dependencies
if($pfb == "glfw")
{
  import intf_libs += glfw%lib{glfw}
}
elif($pfb == "osx")
{
  sys_libs += -framework AppKit -framework ModelIO
}

if($rnb == "opengl2" || $rnb == "opengl3")
{
  switch $tcls,$tsys: path.match
  {
    case 'linux'
    {
      sys_libs += -lGL
    }
    case 'macos'
    {
      sys_libs += -framework OpenGL
    }
  }
}
elif($rnb == "vulkan")
{
  liba{imgui}: cxx.libs += -lvulkan
  liba{imgui}: cxx.export.libs += -lvulkan
  cxx.poptions += -DVK_PROTOTYPES
}
elif($rnb == "metal")
{
  sys_libs += -framework Metal -framework MetalKit
}


# Source file control
./: liba{imgui}: {hxx cxx}{*} $impl_libs $intf_libs
liba{imgui}: {hxx cxx}{backends/imgui_impl_$hlf} : include = $usehlframworkbackend
liba{imgui}: {hxx cxx}{backends/imgui_impl_$pfb} : include = ($pfb != 'osx')
liba{imgui}: {hxx cxx}{backends/imgui_impl_$rnb} : include = ($rnb != 'metal')

# Special handling of objective-C sources
# Selecting the standard here is messy -> Minimum C++11 mode is needed
# Ideally the same C++ std should be used as rest of the source code
# Banking on backward compatibility which can break
obja{backends/imgui_impl_osx.a.o}: file{backends/imgui_impl_osx.mm}
{{
   diag objective-c ($<[0])
   $cxx.path -std=c++11 $cxx.poptions $cc.poptions $cxx.coptions $cc.coptions\
   -c $path($<[0]) -o $path($>)
}}
liba{imgui}: obja{backends/imgui_impl_osx.a.o} : include = ($pfb == 'osx')
liba{imgui}: hxx{backends/imgui_impl_osx} : include = ($pfb == 'osx')

# Special objc-weak is needed to allow compilation as __weak is used
obja{backends/imgui_impl_metal.a.o}: file{backends/imgui_impl_metal.mm}
{{
   diag objective-c ($<[0])
   $cxx.path -std=c++11 -fobjc-weak $cxx.poptions $cc.poptions $cxx.coptions $cc.coptions\
   -c $path($<[0]) -o $path($>)
}}
liba{imgui}: obja{backends/imgui_impl_metal.a.o} : include = ($rnb == 'metal')
liba{imgui}: hxx{backends/imgui_impl_metal} : include = ($rnb == 'metal')


# Build options.
#
cxx.poptions =+ "-I$out_base" "-I$src_base" "-I$src_base/backends"
cxx.libs += $sys_libs

# Export options.
#
liba{imgui}:
{
  cxx.export.poptions = "-I$out_base" "-I$src_base" "-I$src_base/backends"
  cxx.export.libs += $intf_libs $sys_libs
}

hxx{*}:
{
  install         = include/imgui/
  install.subdirs = true
}
